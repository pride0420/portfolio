package com.example.demo.controller;

import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.demo.dao.gameAnswerMapper;

import com.example.demo.vo.gameanswer;
import com.example.demo.vo.gameplayer;

import jakarta.servlet.http.HttpSession;

@Controller
public class gameController {
	
	@Autowired()
	public gameAnswerMapper gameanswermapper;
	
	@GetMapping("goGame")
	public String gotoGame() {
		return "game/gameindex";
	}
	@GetMapping("Gameover")
	public String gotoGameover() {
		return "game/gameover";
	}
	
	
	@Autowired()
	public HttpSession session;
	//ANSWER
	@GetMapping("addanswer")
	public String addanswer() {
		int[] number=new int[9];
		for(int i=0;i<number.length;i++){
            number[i]=i+1;
           }
		
		String n=show(number);;
		gameanswer ans=new gameanswer(n);
		gameanswermapper.addGame(ans);
		List<Integer> ANS=gameanswermapper.queryanswerList(gameanswermapper.queryId());
		session.setAttribute("ANS", ANS);
		gameplayer gp=gameanswermapper.queryplayer(gameanswermapper.queryplayerId());
		if(gp!=null) {
		gameanswermapper.deletePlayer(gp.getId());
		}
		return "game/playAB";
		
		
	}
	
	
	
	@GetMapping("addplayer")
	public String addPlayer(String playernub) {
		
		gameplayer gp=new gameplayer(playernub);
		gameanswermapper.addPlayer(gp);
		
		String ans=gameanswermapper.queryanswer(gameanswermapper.queryId()).getAnswernub();
		String play=gameanswermapper.queryplayer(gameanswermapper.queryplayerId()).getPlayernub();
		char[] asw=card(ans);
		char[] ply=card(play);
		int A=0;
		int B=0;
		
		for(int j=0;j<4;j++) {
			for(int i=0;i<4;i++) {
				if(asw[i]==ply[i]&&i==j) {
				A++;	
				}else if(asw[i]==ply[j]&&i!=j) {
					B++;
				}
			}
		}
		if(A!=4) {
		gameplayer gpl=gameanswermapper.queryplayer(gameanswermapper.queryplayerId());
		gpl.setA(A);
		gpl.setB(B);
		gpl.getId();
		gameanswermapper.update(gpl);
		session.setAttribute("PLAY", gpl);
		List<gameplayer> playall=gameanswermapper.query();
		session.setAttribute("PLAYALL", playall);
		return "game/playAB";
	}else {
		gameanswermapper.deletePlayer(gameanswermapper.queryplayerId());
		return "Gameover";
				}
	
	}
	@GetMapping("getpl")
	public String getpl(String playernub) {
		
		gameplayer gp=new gameplayer(playernub);
		gameanswermapper.addPlayer(gp);
		
		String ans=gameanswermapper.queryanswer(gameanswermapper.queryId()).getAnswernub();
		String play=gameanswermapper.queryplayer(gameanswermapper.queryplayerId()).getPlayernub();
		char[] asw=card(ans);
		char[] ply=card(play);
		int A=0;
		int B=0;
		
			for(int i=0;i<4;i++) {
				
				System.out.println("asw="+asw[i]);
				System.out.println("ply="+ply[i]);
				
			
		}
		
		
		
		for(int j=0;j<4;j++) {
			for(int i=0;i<4;i++) {
				if(asw[i]==ply[i]&&i==j) {
				A++;	
				System.out.println("A="+A);
				}else if(asw[i]==ply[j]&&i!=j) {
					B++;
				}
			}
		}if(A!=4) {
			gameplayer gpl=gameanswermapper.queryplayer(gameanswermapper.queryplayerId());
			gpl.setA(A);
			gpl.setB(B);
			gpl.getId();
			gameanswermapper.update(gpl);
			session.setAttribute("PLAY", gpl);
			List<gameplayer> playall=gameanswermapper.query();
			session.setAttribute("PLAYALL", playall);
			return "game/playAB";
		}else {
			gameanswermapper.deletePlayer(gameanswermapper.queryplayerId());
			return "";
					}
	}
	
	
	
	
	
	
	
	
	
	
	//篩選隨機數
	public static String show(int[] number) {
		Random r=new Random();
		for(int i=number.length-1;i>0;i--) {
			int s=r.nextInt(i+1);
			int temp=number[i];
			number[i]=number[s];
			number[s]=temp;
		}
		String n="";
		for(int i=0;i<4;i++) {
			n=n+number[i];
		}
		return n;
	}
	public char[] card(String x) {
		char[] c=new char[4];
		for(int i=0;i<4;i++) {
			c[i]=x.charAt(i);
		}
		return c;
	}

}


